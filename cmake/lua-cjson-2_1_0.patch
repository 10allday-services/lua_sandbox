--- CMakeLists.txt.orig	2013-10-29 12:25:24.999254786 -0700
+++ CMakeLists.txt	2013-10-29 13:15:19.083129974 -0700
@@ -1,8 +1,3 @@
-# If Lua is installed in a non-standard location, please set the LUA_DIR
-# environment variable to point to prefix for the install. Eg:
-#       Unix: export LUA_DIR=/home/user/pkg
-#       Windows: set LUA_DIR=c:\lua51
-
 project(lua-cjson C)
 cmake_minimum_required(VERSION 2.6)
 
@@ -15,8 +10,7 @@
         FORCE)
 endif()
 
-find_package(Lua51 REQUIRED)
-include_directories(${LUA_INCLUDE_DIR})
+include_directories("${EP_BASE}/include/luajit-2.0")
 
 if(NOT USE_INTERNAL_FPCONV)
     # Use libc number conversion routines (strtod(), sprintf())
@@ -50,27 +44,11 @@
     add_definitions(-DUSE_INTERNAL_ISINF)
 endif()
 
-set(_MODULE_LINK "${CMAKE_THREAD_LIBS_INIT}")
-get_filename_component(_lua_lib_dir ${LUA_LIBRARY} PATH)
-
-if(APPLE)
-    set(CMAKE_SHARED_MODULE_CREATE_C_FLAGS
-        "${CMAKE_SHARED_MODULE_CREATE_C_FLAGS} -undefined dynamic_lookup")
-endif()
-
 if(WIN32)
-    # Win32 modules need to be linked to the Lua library.
-    set(_MODULE_LINK ${LUA_LIBRARY} ${_MODULE_LINK})
-    set(_lua_module_dir "${_lua_lib_dir}")
     # Windows sprintf()/strtod() handle NaN/inf differently. Not supported.
     add_definitions(-DDISABLE_INVALID_NUMBERS)
-else()
-    set(_lua_module_dir "${_lua_lib_dir}/lua/5.1")
 endif()
 
-add_library(cjson MODULE lua_cjson.c strbuf.c ${FPCONV_SOURCES})
-set_target_properties(cjson PROPERTIES PREFIX "")
-target_link_libraries(cjson ${_MODULE_LINK})
-install(TARGETS cjson DESTINATION "${_lua_module_dir}")
-
-# vi:ai et sw=4 ts=4:
+add_library(cjson STATIC lua_cjson.c strbuf.c ${FPCONV_SOURCES})
+target_link_libraries(cjson "${EP_BASE}/lib/libluajit-5.1.a" "${CMAKE_THREAD_LIBS_INIT}")
+install(TARGETS cjson DESTINATION lib)
